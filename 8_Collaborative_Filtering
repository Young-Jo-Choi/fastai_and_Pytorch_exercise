{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"8_Collaborative_Filtering","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMtmPQ6NvUsLzWcOLEmu5DB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sxywkkZ8Acxj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1656744285567,"user_tz":-540,"elapsed":24934,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"4c479609-9895-48fe-8688-59ef0a06804f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","working_path = '/content/drive/MyDrive/Colab Notebooks/torchtorch/'"]},{"cell_type":"code","source":["pip install fastai --upgrade"],"metadata":{"id":"YL1XuSW4Ava-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip uninstall folium"],"metadata":{"id":"0VNW47VGAwua"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install folium==0.2.1"],"metadata":{"id":"ygfTraIzAxwq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","os.chdir(working_path)"],"metadata":{"id":"-Ta2bplOAyjc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install -Uqq fastbook"],"metadata":{"id":"qi7qXQQoAz1i"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 협업 필터링\n","추천하는 상황에서 사용자 A가 이미 구매했거나 좋아하는 제품을 확인하고, 유사 제품을 구매했거나 좋아하는 다른 사용자 B를 찾아, B가 구매한 제품을 A에게 추천\n","--> 특정 제품을 누가 좋아했는지만 필요할 뿐, 제품 자체에 대한 정보는 필요하지 않음\n","\n","제품(product)보다 항목(item)이라는 일반화된 용어를 더 자주 사용, 항목은 사람들이 클릭하는 링크, 환자별 맞춤 진단 등 무엇이든 될 수 있다.\n","<br><br>\n","\n","핵심 : 잠재 요소(latent factors)<br>\n","어떤 종류의 영화를 좋아한다고 넷플릭스에 알려준 적이 없고 영화 정보 데이터베이스에 영화의 유형을 나타내는 열이 필요하지도 않다. 다만 영화의 여러 요소들을 표현할 방법이 있어야하며, 적어도 사용자가 영화를 고른 이유와 연결고리가 있어야 한다.<br>\n","(명시적으로 존재하지는 않지만, 잠재 요소가 잠재적으로 이를 표현)"],"metadata":{"id":"1FkbNDZgy9vg"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from IPython.display import display"],"metadata":{"id":"067hAIzr4hCp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from fastai.collab import *\n","from fastai.tabular.all import *\n","path = untar_data(URLs.ML_100k)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":38},"id":"V3SVAFA6y9oE","executionInfo":{"status":"ok","timestamp":1656744656900,"user_tz":-540,"elapsed":6879,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"b71195be-bb4a-498e-e817-36a083dd871c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","    <div>\n","      <progress value='4931584' class='' max='4924029' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      100.15% [4931584/4924029 00:01<00:00]\n","    </div>\n","    "]},"metadata":{}}]},{"cell_type":"code","source":["ratings = pd.read_csv(path/'u.data', delimiter='\\t', header=None, names=['user','movie','rating','timestamp'])\n","ratings.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YEg9blpWz3F7","executionInfo":{"status":"ok","timestamp":1656744660083,"user_tz":-540,"elapsed":848,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"c6525829-b289-4501-e459-81f80ac623eb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   user  movie  rating  timestamp\n","0   196    242       3  881250949\n","1   186    302       3  891717742\n","2    22    377       1  878887116\n","3   244     51       2  880606923\n","4   166    346       1  886397596"],"text/html":["\n","  <div id=\"df-2a02f1aa-509c-4656-bed0-add42f7f3899\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>movie</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>196</td>\n","      <td>242</td>\n","      <td>3</td>\n","      <td>881250949</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>186</td>\n","      <td>302</td>\n","      <td>3</td>\n","      <td>891717742</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>22</td>\n","      <td>377</td>\n","      <td>1</td>\n","      <td>878887116</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>244</td>\n","      <td>51</td>\n","      <td>2</td>\n","      <td>880606923</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>166</td>\n","      <td>346</td>\n","      <td>1</td>\n","      <td>886397596</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a02f1aa-509c-4656-bed0-add42f7f3899')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2a02f1aa-509c-4656-bed0-add42f7f3899 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2a02f1aa-509c-4656-bed0-add42f7f3899');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# 대충 사람이 이해할 수 있는 형태인 교차표\n","temp = pd.crosstab(ratings['user'],ratings['movie'],values=ratings['rating'], aggfunc='sum')\n","temp.loc[temp.sum(axis=1)>1500, temp.sum(axis=0)>1450].fillna('')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"tBmiw6By1vZb","executionInfo":{"status":"ok","timestamp":1656600574791,"user_tz":-540,"elapsed":304,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"c17787bd-6f3f-4f19-f624-6db3ff9a53c6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["movie  1    7    50   56   98   100  121  127  172  174  181  258  286  288  \\\n","user                                                                          \n","7           5.0  5.0  5.0  4.0  5.0  5.0  5.0  4.0  5.0  3.0  4.0  4.0  4.0   \n","13     3.0  2.0  5.0  5.0  4.0  5.0  5.0  5.0  5.0  4.0  5.0  4.0  3.0  1.0   \n","59     2.0  4.0  5.0  5.0  5.0  5.0  4.0  5.0  5.0  5.0  5.0  3.0  3.0  5.0   \n","276    5.0  5.0  5.0  5.0  5.0  5.0  4.0  5.0  5.0  5.0  5.0  5.0       4.0   \n","303    5.0  4.0  5.0  5.0  5.0  5.0  3.0  5.0  5.0  5.0  5.0  4.0  5.0  4.0   \n","416    5.0  4.0  5.0  5.0  5.0  5.0  5.0  5.0  5.0  5.0  5.0  5.0  5.0  5.0   \n","450    4.0  4.0  5.0  4.0  4.0  4.0  3.0  5.0  4.0  5.0  4.0  4.0  4.0  3.0   \n","655    2.0  3.0  4.0  3.0  4.0  3.0  3.0  5.0  4.0  3.0  3.0  2.0  3.0  3.0   \n","846              5.0  5.0  4.0            5.0  4.0  5.0  5.0  3.0       4.0   \n","\n","movie  294  300  313  \n","user                  \n","7      1.0  4.0       \n","13     2.0  1.0  4.0  \n","59               5.0  \n","276    4.0  4.0  5.0  \n","303    4.0  1.0       \n","416    4.0  4.0  5.0  \n","450    4.0  4.0  5.0  \n","655    3.0  3.0  4.0  \n","846    3.0            "],"text/html":["\n","  <div id=\"df-777a297d-bc81-4d50-8cf8-5f8f46990b2e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>movie</th>\n","      <th>1</th>\n","      <th>7</th>\n","      <th>50</th>\n","      <th>56</th>\n","      <th>98</th>\n","      <th>100</th>\n","      <th>121</th>\n","      <th>127</th>\n","      <th>172</th>\n","      <th>174</th>\n","      <th>181</th>\n","      <th>258</th>\n","      <th>286</th>\n","      <th>288</th>\n","      <th>294</th>\n","      <th>300</th>\n","      <th>313</th>\n","    </tr>\n","    <tr>\n","      <th>user</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td></td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td></td>\n","      <td></td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>276</th>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td></td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>303</th>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>416</th>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>450</th>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>655</th>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>846</th>\n","      <td></td>\n","      <td></td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td></td>\n","      <td></td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td></td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-777a297d-bc81-4d50-8cf8-5f8f46990b2e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-777a297d-bc81-4d50-8cf8-5f8f46990b2e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-777a297d-bc81-4d50-8cf8-5f8f46990b2e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["중간의 빈 셀들이 모델이 채워넣을 부분<br>\n","영화의 특징과, 사용자별로 각 요소들을 좋아하는 정도를 안다면 빈 부분을 채워넣을 수 있다."],"metadata":{"id":"rIZcXGyk38eh"}},{"cell_type":"code","source":["# SF,액션,고전을 나타내는 요소 -> 잠재요소의 값을 안다는 가정하에 진행\n","movie1 = np.array([0.98,0.9,-0.9])\n","user1 = np.array([0.9,0.8,-0.6])\n","# 유사성\n","(user1*movie1).sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m0saImOV1xkp","executionInfo":{"status":"ok","timestamp":1656600576715,"user_tz":-540,"elapsed":470,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"54dbbdc1-f63c-40a0-8860-d447a83aa2fa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.1420000000000003"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["# 잠재 요소 학습\n","경사하강법을 사용\n","\n","1. 일부 파라미터를 임의로 초기화 \n","    - 파라미터 : 각 사용자와 영화의 일련의 잠재요소, 개수는 스스로 결정\n","    - 사용자와 영화의 (임의로 초기화된) 잠재 요소 간 dot product를 crosstab에 채워넣는다.\n","2. 예측을 계산\n","    - 예) 사용자의 첫째 요소는 사용자가 액션 영화를 좋아하는 정도, 영화의 첫째 요소는 영화에 액션이 많은지를 표현하는 정도\n","    - 사용자의 취향과 영화의 성향이 일치한다면 dot product 값이 크고, 일치하지 않는다면 dot product 값이 낮을 것\n","3. 손실 계산\n","    - 각 사용자가 각 영화에 부여한 실제 점수와 비교\n","    - 여러 손실 계산 함수(mse 등)\n","\n","# DataLoaders 만들기\n","가독성을 위해 영화의 ID보다 제목을 표시하기로 한다."],"metadata":{"id":"AtV_CBcv47PA"}},{"cell_type":"code","source":["movies = pd.read_csv(path/'u.item', delimiter='|', encoding='latin-1',\n","                     usecols=(0,1), names=('movie','title'), header=None)\n","ratings = ratings.merge(movies)\n","ratings.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Fq-C5BZ02jM6","executionInfo":{"status":"ok","timestamp":1656744667309,"user_tz":-540,"elapsed":1004,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"ce3e8b14-69a7-4f3e-b019-9a1f3b96d711"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   user  movie  rating  timestamp         title\n","0   196    242       3  881250949  Kolya (1996)\n","1    63    242       3  875747190  Kolya (1996)\n","2   226    242       5  883888671  Kolya (1996)\n","3   154    242       3  879138235  Kolya (1996)\n","4   306    242       5  876503793  Kolya (1996)"],"text/html":["\n","  <div id=\"df-a5f5933f-134c-46dc-991f-a95a1e180ad5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>movie</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","      <th>title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>196</td>\n","      <td>242</td>\n","      <td>3</td>\n","      <td>881250949</td>\n","      <td>Kolya (1996)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>63</td>\n","      <td>242</td>\n","      <td>3</td>\n","      <td>875747190</td>\n","      <td>Kolya (1996)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>226</td>\n","      <td>242</td>\n","      <td>5</td>\n","      <td>883888671</td>\n","      <td>Kolya (1996)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>154</td>\n","      <td>242</td>\n","      <td>3</td>\n","      <td>879138235</td>\n","      <td>Kolya (1996)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>306</td>\n","      <td>242</td>\n","      <td>5</td>\n","      <td>876503793</td>\n","      <td>Kolya (1996)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5f5933f-134c-46dc-991f-a95a1e180ad5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a5f5933f-134c-46dc-991f-a95a1e180ad5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a5f5933f-134c-46dc-991f-a95a1e180ad5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# 협업필터링에 특화된 객체, col1=사용자, col2=항목, col3=점수 (item_name : 항목으로 쓸 열의 이름)\n","dls = CollabDataLoaders.from_df(ratings, item_name='title',bs=64)\n","dls.show_batch()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"7l4x4J1K7_7P","executionInfo":{"status":"ok","timestamp":1656744684771,"user_tz":-540,"elapsed":4,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"41cdd566-a5fc-4198-9c3d-751dd059ca6e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>title</th>\n","      <th>rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>354</td>\n","      <td>Brassed Off (1996)</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>671</td>\n","      <td>Rock, The (1996)</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>539</td>\n","      <td>Back to the Future (1985)</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>93</td>\n","      <td>Matilda (1996)</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>21</td>\n","      <td>Chain Reaction (1996)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>345</td>\n","      <td>Crucible, The (1996)</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>654</td>\n","      <td>Usual Suspects, The (1995)</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>64</td>\n","      <td>Air Force One (1997)</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>436</td>\n","      <td>Blink (1994)</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>361</td>\n","      <td>In the Line of Fire (1993)</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"code","source":["# pytorch를 이용해 협업 필터링에 대한 crosstab을 바로 사용할 수는 없음\n","# 영화와 사용자의 잠재 요소 테이블을 나타낼 수는 있음\n","n_users = len(dls.classes['user'])\n","n_movies = len(dls.classes['title'])\n","n_factors = 5   # 임의로 정한 수\n","\n","user_factors = torch.randn(n_users,n_factors)\n","movie_factors = torch.randn(n_movies, n_factors)"],"metadata":{"id":"L3wo5G0K8_HI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 두 잠재 요소 벡터 간 dot product를 구하기 위해 index(여기서는 3)를 이용해 다음과 같이 계산할 수 있다.\n","one_hot_3 = one_hot(3, n_users).float()\n","display(user_factors.t() @ one_hot_3)\n","display(user_factors[3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"7i4KJtAk-gT3","executionInfo":{"status":"ok","timestamp":1656330444665,"user_tz":-540,"elapsed":5,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"8058bb47-efb1-47ef-b446-5f0677b75229"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["tensor([ 1.1708, -0.9254,  0.3179, -0.9287, -0.5002])"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tensor([ 1.1708, -0.9254,  0.3179, -0.9287, -0.5002])"]},"metadata":{}}]},{"cell_type":"markdown","source":["모든 인덱스에 대해 원-핫 인코딩된 벡터를 이어붙여 행렬을 만든다며, 행렬 곱셈으로 여러 인덱스에 대한 작업을 한번에 처리할 수 있다.<br>\n","단, 이런 방식은 필요 이상으로 많은 메모리와 시간이 들어간다.<br>\n","(원-핫 인코딩된 벡터를 이용해 숫자 1의 위치를 검색할 이유가 없음)\n","\n","대부분의 딥러닝 라이브러리는 정수로 배열의 색인을 즉시 찾을 수 있는 특수 계층인 embedding을 제공한다.<br>\n","embedding : 간단히 즉시 인덱스를 찾는 식으로 구현되는 계산법 -> 원-핫 인코딩된 행렬을 곱한다.\n","\n","영화의 각 특징(요소)를 표현할 수치는 스스로 찾기보다 모델에게 학습하도록 한다. 사용자와 영화의 기존 관계를 분석함으로써 모델은 각 특징의 중요도를 스스로 파악할 수 있다.\n","\n","# 협업 필터링 모델 설계"],"metadata":{"id":"ie6OmcvA_82w"}},{"cell_type":"code","source":["n_users, n_movies, n_factors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G8us0y_eF6Am","executionInfo":{"status":"ok","timestamp":1656600635309,"user_tz":-540,"elapsed":311,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"af41a031-afe7-4d15-f960-8864e332a9cd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(944, 1665, 5)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# 파이토치에서 모델 만드는 예시\n","class DotProduct(Module):\n","    def __init__(self, n_users, n_movies, n_factors):\n","        # embedding : 간단히 즉시 인덱스를 찾는 식으로 구현되는 계산법 -> 원-핫 인코딩된 행렬을 곱한다.\n","        self.user_factors = Embedding(n_users, n_factors)\n","        self.movie_factors = Embedding(n_movies, n_factors)\n","    # 모델 입력 : batch_size * 2 모양의 텐서\n","    # 첫번째 열 : 사용자 ID\n","    # 두번째 열 : 영화 ID\n","    def forward(self, x):\n","        # 임베딩 계층 : 사용자와 영화의 잠재 요소를 나타내는 행렬\n","        users = self.user_factors(x[:,0])    \n","        movies = self.movie_factors(x[:,1])\n","        return (users*movies).sum(dim=1)"],"metadata":{"id":"QaCfo63_-8F4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x,y = dls.one_batch()\n","x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JSDq93X-DL9C","executionInfo":{"status":"ok","timestamp":1656600712175,"user_tz":-540,"elapsed":397,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"b6bb4123-c88b-4113-8ae8-7af2250bbbca"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([64, 2])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["model = DotProduct(n_users, n_movies, 50)\n","learn = Learner(dls, model, loss_func=MSELossFlat())\n","learn.fit_one_cycle(5,5e-3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2L0aqgFEDN54","executionInfo":{"status":"ok","timestamp":1656600764508,"user_tz":-540,"elapsed":51152,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"d40544b5-205f-47fa-8cf2-a9a5691e5574"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>1.324663</td>\n","      <td>1.315275</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>1.086150</td>\n","      <td>1.084954</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.944901</td>\n","      <td>0.985613</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.839183</td>\n","      <td>0.891839</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.790994</td>\n","      <td>0.876272</td>\n","      <td>00:07</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"code","source":["# 모델 개선 : 예측범위가 0~5가 되도록\n","class DotProduct(nn.Module):\n","    def __init__(self, n_users, n_movies, n_factors, y_range=(0,5.5)):\n","        super().__init__()\n","        self.user_factors = Embedding(n_users, n_factors)\n","        self.movie_factors = Embedding(n_movies, n_factors)\n","        self.y_range = y_range\n","    def forward(self, x):\n","        users = self.user_factors(x[:,0])\n","        movies = self.movie_factors(x[:,1])\n","        return sigmoid_range((users*movies).sum(dim=1), *self.y_range)\n","        \n","model = DotProduct(n_users,n_movies,50)\n","learn = Learner(dls, model, loss_func=MSELossFlat())\n","learn.fit_one_cycle(5,5e-3)"],"metadata":{"id":"0cQnow9EDfMI","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1656586354065,"user_tz":-540,"elapsed":40164,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"6d9ea3dd-35b8-4bd3-cfc5-d84283652795"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.984169</td>\n","      <td>0.978753</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.866391</td>\n","      <td>0.899629</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.700326</td>\n","      <td>0.863402</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.496277</td>\n","      <td>0.862426</td>\n","      <td>00:09</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.374022</td>\n","      <td>0.865810</td>\n","      <td>00:08</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"code","source":["# 어떤 사용자는 다른 사용자보다 더 긍정적이거나 부정적인 추천을 하는 경향이 있고, 어떤 영화는 다른 영화보다 더 좋거나 나쁠 수 있다.\n","# 각 사용자와 영화별로 점수에 추가할 수 있는 단일 수치를 bias를 통해 처리\n","class DotProductBias(nn.Module):\n","    def __init__(self, n_users, n_movies, n_factors, y_range=(0,5.5)):\n","        super().__init__()\n","        self.user_factors = Embedding(n_users, n_factors)\n","        self.user_bias = Embedding(n_users, 1)\n","        self.movie_factors = Embedding(n_movies, n_factors)\n","        self.movie_bias = Embedding(n_movies, 1)\n","        self.y_range = y_range\n","    def forward(self, x):\n","        users = self.user_factors(x[:,0])\n","        movies = self.movie_factors(x[:,1])\n","        res = (users*movies).sum(dim=1, keepdim=True)\n","        res += self.user_bias(x[:,0]) + self.movie_bias(x[:,1])\n","        return sigmoid_range(res, *self.y_range)\n","        \n","model = DotProductBias(n_users,n_movies, 50)\n","learn = Learner(dls, model, loss_func=MSELossFlat())\n","learn.fit_one_cycle(5,5e-3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ys26b5nWPfkD","executionInfo":{"status":"ok","timestamp":1656587187428,"user_tz":-540,"elapsed":39438,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"49e4228a-17f2-4193-a386-ff83763b9a1d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.941491</td>\n","      <td>0.939544</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.821657</td>\n","      <td>0.855158</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.646608</td>\n","      <td>0.857605</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.404770</td>\n","      <td>0.882160</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.301879</td>\n","      <td>0.889123</td>\n","      <td>00:07</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"markdown","source":["## 가중치 감쇠"],"metadata":{"id":"QoEstPLxX2ng"}},{"cell_type":"code","source":["model = DotProductBias(n_users, n_movies, 50)\n","learn = Learner(dls, model, loss_func=MSELossFlat())\n","# wd : 가중치 감쇠, loss에 더한 제곱의 합을 제어하는 파라미터\n","learn.fit_one_cycle(5,5e-3, wd=0.1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fYwe0_Y2Sema","executionInfo":{"status":"ok","timestamp":1656588859539,"user_tz":-540,"elapsed":43105,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"95293832-a624-4d96-ed9c-22455dfd7204"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.930365</td>\n","      <td>0.926264</td>\n","      <td>00:12</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.835064</td>\n","      <td>0.860408</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.715359</td>\n","      <td>0.827360</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.596246</td>\n","      <td>0.811504</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.480101</td>\n","      <td>0.812649</td>\n","      <td>00:07</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"markdown","source":["## 임베딩 모듈 설계\n","Embedding 클래스 대체"],"metadata":{"id":"oVDXmS_Tck-O"}},{"cell_type":"code","source":["class T(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.a = nn.Parameter(torch.ones(3)) # 파이토치 모듈의 학습 가능한 파라미터\n","        self.b = torch.ones(3)               # 모듈 속성으로 텐서를 추가하더라도 parameters 메서드가 반환하는 파라미터 그룹에는 자동으로 포함되지 않음\n","        self.c = nn.Linear(2,3,bias=False)\n","        \n","t = T()\n","L(t.parameters())  # 파이토치 모듈의 학습 가능한 파라미터의 목록"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ezxAoE2jY0yQ","executionInfo":{"status":"ok","timestamp":1656602766931,"user_tz":-540,"elapsed":298,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"301be28c-c3c1-4879-c483-e73c90927d39"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(#2) [Parameter containing:\n","tensor([1., 1., 1.], requires_grad=True),Parameter containing:\n","tensor([[-0.2628,  0.6160],\n","        [-0.6304,  0.4107],\n","        [-0.3604, -0.5749]], requires_grad=True)]"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# 명시적으로 임의 초기화된 텐서 생성\n","def create_params(size):\n","    return nn.Parameter(torch.zeros(*size).normal_(0,0.01))"],"metadata":{"id":"X6XFYvqcMuBl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class DotProductBias(nn.Module):\n","    def __init__(self, n_users, n_movies, n_factors, y_range=(0,5.5)):\n","        super().__init__()\n","        self.user_factors = create_params([n_users, n_factors])\n","        self.user_bias = create_params([n_users])\n","        self.movie_factors = create_params([n_movies, n_factors])\n","        self.movie_bias = create_params([n_movies])\n","        self.y_range = y_range\n","\n","    def forward(self, x):\n","        users = self.user_factors[x[:,0]]\n","        movies = self.movie_factors[x[:,1]]\n","        # user_factor와 movie_factor의 elementwise product (n_factors크기의 벡터의 dot_product -> bias까지 더한 후 0~5로 별점 계산)\n","        res = (users*movies).sum(dim=1)\n","        res += self.user_bias[x[:,0]]+self.movie_bias[x[:,1]]\n","        return sigmoid_range(res, *self.y_range)"],"metadata":{"id":"ooqQAgqdO3vu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = DotProductBias(n_users, n_movies, 50)"],"metadata":{"id":"lhA_zCz3RHxc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.user_factors.shape, model.movie_factors.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6sB4alwZRN84","executionInfo":{"status":"ok","timestamp":1656604226097,"user_tz":-540,"elapsed":293,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"b61b5d3b-d6d6-43b1-8de8-2bb967a4feb1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([944, 50]), torch.Size([1665, 50]))"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["learn = Learner(dls, model, loss_func=MSELossFlat())\n","learn.fit_one_cycle(5,5e-3, wd=0.1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"uAsZ3Yf9Ry8R","executionInfo":{"status":"ok","timestamp":1656604795294,"user_tz":-540,"elapsed":40823,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"ed40f6d3-550e-4137-c5e9-5049a0b430d3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.936744</td>\n","      <td>0.948129</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.855814</td>\n","      <td>0.873166</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.718259</td>\n","      <td>0.826131</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.587593</td>\n","      <td>0.817619</td>\n","      <td>00:07</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.459229</td>\n","      <td>0.818024</td>\n","      <td>00:08</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"markdown","source":["# 임베딩과 편향 분석"],"metadata":{"id":"OB9JeKJPVzfz"}},{"cell_type":"code","source":["# 영화에 대한 편향 분석\n","print(learn.model.movie_bias.shape)\n","movie_bias = learn.model.movie_bias\n","idxs = movie_bias.argsort()[:5]\n","# 편향이 가장 낮은 영화 목록\n","[dls.classes['title'][i] for i in idxs]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MaEF0bwxVLnh","executionInfo":{"status":"ok","timestamp":1656605267919,"user_tz":-540,"elapsed":4,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"b2ea4970-5d4b-4bf7-ec8e-0bcce06cf984"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([1665])\n"]},{"output_type":"execute_result","data":{"text/plain":["['Lawnmower Man 2: Beyond Cyberspace (1996)',\n"," 'Children of the Corn: The Gathering (1996)',\n"," 'Mortal Kombat: Annihilation (1997)',\n"," 'Crow: City of Angels, The (1996)',\n"," 'Cable Guy, The (1996)']"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["해석 :  설령 사용자가 영화의 잠재 요소에 잘 매칭되더라도, 일반적으로는 이 영화를 좋아하지 않음\n","\n","단순히 평균 점수에 따라 영화를 정렬하는 것보다 이런 식으로 학습된 편향을 살펴보면 사람들이 좋아하지 않는 종류의 영화인지 뿐 아니라, 사람들이 좋아하지 않는 종류더라도 즐길 만한 영화인지도 알 수 있다."],"metadata":{"id":"0-UpV8iUXud6"}},{"cell_type":"code","source":["# 편향이 가장 높은 영화 목록 -> 평소에 좋아하는 장르가 아니더라도 재밌게 볼 수 있음\n","idxs = movie_bias.argsort(descending=True)[:5]\n","[dls.classes['title'][i] for i in idxs]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W9XH7fSbXByH","executionInfo":{"status":"ok","timestamp":1656605765478,"user_tz":-540,"elapsed":3,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"f01e377a-034a-44d9-a744-f4f445f25f8c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Shawshank Redemption, The (1994)',\n"," 'Titanic (1997)',\n"," \"Schindler's List (1993)\",\n"," 'Silence of the Lambs, The (1991)',\n"," 'L.A. Confidential (1997)']"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["# 영화나 사용자의 잠재요소를 담은 임베딩 행렬을 바로 해석하는 것은 어렵다 -> PCA등을 이용해 볼 수 있음\n","from sklearn.decomposition import PCA\n","pca = PCA(n_components=2)\n","movie_factors_pc2 = pca.fit_transform(learn.model.movie_factors.cpu().detach().numpy())"],"metadata":{"id":"-Nf-ATgwZba0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dls.classes['title']"],"metadata":{"id":"iOoVc6I3akmg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize = (12,12))\n","plt.scatter(movie_factors_pc2[:30,0],movie_factors_pc2[:30,1])\n","for i in range(30):\n","    plt.text(movie_factors_pc2[i,0],movie_factors_pc2[i,1],dls.classes['title'][i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":700},"id":"twSZaFFgZtLj","executionInfo":{"status":"ok","timestamp":1656606306992,"user_tz":-540,"elapsed":1248,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"1b80ade4-f0e9-44d5-95bb-e127264da056"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x864 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## fastai.collab\n","--> 방금과 같이 class 정의해줄 필요 없이 즉시 협업 필터링을 구축하는 함수를 제공"],"metadata":{"id":"ZiwZiarRr8d5"}},{"cell_type":"code","source":["learn = collab_learner(dls, n_factors = 50, y_range=(0,5.5))\n","learn.fit_one_cycle(5, 5e-3, wd=0.1)"],"metadata":{"id":"2_i8Ja8iaSzq","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1656746309949,"user_tz":-540,"elapsed":74399,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"a5c8e40e-7a7a-4040-e0e3-6ef3c71f6ab6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.943407</td>\n","      <td>0.947538</td>\n","      <td>00:13</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.843544</td>\n","      <td>0.873747</td>\n","      <td>00:13</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.722411</td>\n","      <td>0.837854</td>\n","      <td>00:13</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.595630</td>\n","      <td>0.828890</td>\n","      <td>00:12</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.480159</td>\n","      <td>0.828804</td>\n","      <td>00:07</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"code","source":["# 포함된 계층들의 이름 확인\n","learn.model"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2uCpueAQxVFx","executionInfo":{"status":"ok","timestamp":1656746377013,"user_tz":-540,"elapsed":1009,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"85c17925-6309-4a7d-cf18-ec66e28d3b23"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["EmbeddingDotBias(\n","  (u_weight): Embedding(944, 50)\n","  (i_weight): Embedding(1665, 50)\n","  (u_bias): Embedding(944, 1)\n","  (i_bias): Embedding(1665, 1)\n",")"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# 동일한 분석 과정\n","movie_bias = learn.model.i_bias.weight.squeeze()\n","idxs = movie_bias.argsort(descending=True)[:5]\n","[dls.classes['title'][i] for i in idxs]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"--BbWjAjyDVJ","executionInfo":{"status":"ok","timestamp":1656746549474,"user_tz":-540,"elapsed":458,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"b5c3581b-816f-49bd-9aec-0ce2c4f6a15b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Titanic (1997)',\n"," 'Star Wars (1977)',\n"," 'As Good As It Gets (1997)',\n"," 'L.A. Confidential (1997)',\n"," \"Schindler's List (1993)\"]"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["## 임베딩 거리\n","비슷한 영화 두 개가 있다면, 두 영화를 좋아하는 사용자 역시 비슷하리라 추측할 수 있다. 따라서 두 영화의 임베딩 벡터 역시 유사할 것이다.<br>\n","유사도는 코사인 유사도를 사용한다."],"metadata":{"id":"XBG8ZwkqywWe"}},{"cell_type":"code","source":["# 양들의 침묵(Silence of the Lambs, The (1991))과 비슷한 영화 찾기\n","movie_factors = learn.model.i_weight.weight\n","idx = dls.classes['title'].o2i['Silence of the Lambs, The (1991)']\n","distances = nn.CosineSimilarity(dim=1)(movie_factors, movie_factors[idx][None])\n","idxs = distances.argsort(descending=True)[:5]\n","dls.classes['title'][idxs]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0p745xbuyEKj","executionInfo":{"status":"ok","timestamp":1656747090024,"user_tz":-540,"elapsed":3,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"10c76bcd-be7b-4c50-8ced-e75e8e51cbf9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(#5) ['Silence of the Lambs, The (1991)',\"One Flew Over the Cuckoo's Nest (1975)\",'Ben-Hur (1959)','Right Stuff, The (1983)','Glory (1989)']"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["# 사용자 데이터가 없는 상황\n","(협업 필터링 초기 구축)\n","오랫동안 축척한 사용자 데이터가 있는 안정된 시스템에도 여전히 새 사용자 등록시 임베딩 벡터를 어떻게 할당할지에 관한 문제가 있다.<br>\n","다른 모든 사용자 임베딩 벡터의 평균을 할당할 수도 있겠지만 특정 잠재 요소들의 조합이 일관되지 않을 수 있다. (예를 들어 SF 요소의 평균은 매우 높고 액션 요소이 평균은 매우 낮을 수 있으나, 액션 없는 SF를 좋아하는 경우는 별로 없음)<br>\n","-> 평균 취향(average taste)을 나타내는 특정 사용자를 선택하는 것을 생각해볼 수 있다.\n","\n","사용자의 메타 데이터(가입시 사용자에게 던지는 질문을 기반으로)를 기반으로 한 테이블형 모델로 초기 임베딩 벡터를 구성하는 방법을 생각해볼 수도 있다. <br>\n","(ex)임베딩 벡터를 종속변수로, 가입시 질문의 응답을 독립변수로 둔 모델)<br>\n","\n","단, 매우 열정적인 소수의 사용자가 전체 사용자를 대상으로 하는 추천을 좌우하는 문제가 생길 수 있다. 따라서 이런 긍정적 피드백 루프에 의한 문제에 대한 대비책을 마련해야한다.\n","\n","# 협업 필터링을 위한 딥러닝\n","모델 구조를 딥러닝으로 전환하기 위해서는 임베딩 조회 결과를 활성에 연결하는 것이다."],"metadata":{"id":"H6tnDMYv0uX7"}},{"cell_type":"code","source":["# fastai는 주어진 데이터를 위한 임베딩 행렬에 권장되는 크기를 반환하는 get_emb_sz 함수를 제공한다.\n","# (휴리스틱한 방식으로 크기를 찾아냄)\n","get_emb_sz(dls)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KU9Q4ywl8Gxi","executionInfo":{"status":"ok","timestamp":1656749172781,"user_tz":-540,"elapsed":986,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"16484f7f-df25-4450-af57-6ae5c0583184"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(944, 74), (1665, 102)]"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["class CollabNN(nn.Module):\n","    def __init__(self, user_sz, item_sz, y_range=(0.5,5), n_act=100):\n","        super().__init__()\n","        self.user_factors = Embedding(*user_sz)\n","        self.item_factors = Embedding(*item_sz)\n","        self.layers = nn.Sequential(\n","            nn.Linear(user_sz[1]+ item_sz[1], n_act),   # n_act는 output nodes의 수\n","            nn.ReLU(),\n","            nn.Linear(n_act,1)\n","        )\n","        self.y_range = y_range\n","    def forward(self,x):\n","        embs = self.user_factors(x[:,0]), self.item_factors(x[:,1])\n","        x = self.layers(torch.cat(embs, dim=1))\n","        return sigmoid_range(x, *self.y_range)"],"metadata":{"id":"kHexE5MU8iDF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["embs = get_emb_sz(dls)\n","model = CollabNN(*embs)\n","learn = Learner(dls, model, loss_func=MSELossFlat())\n","learn.fit_one_cycle(5, 5e-3, wd=0.01)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"IfX2r-l-9y3u","executionInfo":{"status":"ok","timestamp":1656749780996,"user_tz":-540,"elapsed":41650,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"d00cf08a-6e27-4ce2-db93-9c78ec75c0bd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.948334</td>\n","      <td>0.950167</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.882436</td>\n","      <td>0.902495</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.865721</td>\n","      <td>0.888417</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.837007</td>\n","      <td>0.873045</td>\n","      <td>00:08</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.786252</td>\n","      <td>0.876502</td>\n","      <td>00:08</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"code","source":["model.layers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LESLNKKW-CUa","executionInfo":{"status":"ok","timestamp":1656750476788,"user_tz":-540,"elapsed":564,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"db51bd76-d43c-4dd7-f13f-c73d4b521326"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Linear(in_features=176, out_features=100, bias=True)\n","  (1): ReLU()\n","  (2): Linear(in_features=100, out_features=1, bias=True)\n",")"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["# colllab_learner 함수의 use_nn=True 인자를 넘겨주면 위와 같은 모델을 사용할 수 있다.\n","learn = collab_learner(dls, use_nn=True, y_range=(0,5.5), \n","                       layers=[100,50]   # 각각 100과 50이라는 크기의 두 은닉 계층을 생성\n","                       )\n","learn.fit_one_cycle(5, 5e-3, wd=0.1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"62A93GPOBwlU","executionInfo":{"status":"ok","timestamp":1656750989557,"user_tz":-540,"elapsed":49127,"user":{"displayName":"최영조","userId":"18429271051406283476"}},"outputId":"2fe429c8-0b88-4155-d311-373324f1bead"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>1.007435</td>\n","      <td>0.989720</td>\n","      <td>00:09</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.939514</td>\n","      <td>0.912750</td>\n","      <td>00:09</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.907178</td>\n","      <td>0.888604</td>\n","      <td>00:09</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.834315</td>\n","      <td>0.855934</td>\n","      <td>00:10</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.751120</td>\n","      <td>0.854847</td>\n","      <td>00:09</td>\n","    </tr>\n","  </tbody>\n","</table>"]},"metadata":{}}]},{"cell_type":"markdown","source":["도메인에 대한 아키텍쳐를 신중하게 구성하는 dot product 접근에 비해 결과가 살짝 나쁘긴 하지만, 다른 사용자와 영화 정보, 날짜와 시간 정보 등 추천에 관련된 모든 정보를 직접 통합하는 등 중요한 추가작업을 수행할 수 있다."],"metadata":{"id":"fM06ZXjYDhjF"}},{"cell_type":"code","source":[""],"metadata":{"id":"r79QKPBcCLEs"},"execution_count":null,"outputs":[]}]}